	
	
	#<======================================== extra function=================================================================>
	
		
	
def go(request):
	#if request.session.has_key('User_Name'):
		if request.POST:
			User_Name = request.POST['User_Name']		
			password=request.POST["Password"]
			Number=request.POST["Vehicle"]	
			print "usernameeee ",User_Name
			my_data = Edit_Lane.objects.filter(User_Name=User_Name)
			print"===================c2================="
			for i in my_data:
				toll_name = i.User_Name
				print "tollname isss", toll_name
				toll_number = i.Lane_Number
				toll_dir = i.Direction
				toll_loc = i.Location
			ancam = Edit_Lane.objects.filter(Lane_Number = toll_number)
			for a in ancam:
				cam=a.Camera1
				cam1=a.Camera2

			data=Relay_Panel.objects.filter(id=toll_number)[0]
			if toll_number==1:
				data.Lane_1='False'
				data.save()
			if toll_number==2:
				data.Lane_2='False'
				data.save()
			if toll_number==3:
				data.Lane_3='False'
				data.save()
			return render_to_response("barriergate.html",{'User_Name':User_Name,"Password":password,"lane_N":toll_number,"toll_dir":toll_dir,"toll_loc":toll_loc,"cma":cam,"cam1":cam1,'Vehicle_Number':Number})
	#else:
		#msg="Antharization"
		#return render_to_response("login.html",{'flag':msg})


def signup_data(request):
	#if request.session.has_key('User_Name'):
		if request.method=="POST":
		
			#try:
				User_Name=request.POST["username"]	
				password=request.POST["password"]
				confirmpassword=request.POST["confirm_pass"]
				typeofuser = request.POST["default"]
				firstname=request.POST["firstname"]
				lastname=request.POST["lastname"]
				laneno=request.POST['laneno']
				if 'user'==User_Name:
					import re
					if not re.search("[a-z]",User_Name):
						msg="User name should a-z Characters only!"
						return render(request,"sign.html",{'flag':msg,"User_Name":User_Name,"firstname":firstname,"lastname":lastname,"password":password,"confirm_pass":confirmpassword,"laneno":laneno,"Location":Location})

					elif password !=confirmpassword:
						msg="Password don't match!"
						return render(request,'signup.html',{'flag':msg,"User_Name":User_Name,"firstname":firstname,"lastname":lastname,"password":password,"confirm_pass":confirmpassword,"laneno":laneno,"Location":Location})
					elif Signup.objects.filter(User_Name=User_Name).exists() :
						msg="User_Name already exist!Please login or request for new Password!"
						return render_to_response("sign.html",{'flag':msg})
					elif Edit_Lane.objects.filter(Lane_Number=laneno).exists():
						msg="Lane No already exist Please enter different"
						return render_to_response("sign.html",{'flag':msg})

					else:
						obj=Signup(User_Name=User_Name,Password=password,User_Type=typeofuser)
						obj.save()
						data=Edit_Lane(User_Name=User_Name,Lane_Number=laneno)
						data.save()
						msg="Account has been successfully created.Please login!"
						return render_to_response("sign.html",{'flag':msg})
				else:
					if password !=confirmpassword:
						msg="Password don't match!"
						return render(request,'signup.html',{'flag':msg,"User_Name":User_Name,"firstname":firstname,"lastname":lastname,"password":password,"confirm_pass":confirmpassword,"laneno":laneno,"Location":Location})
					elif Signup.objects.filter(User_Name=User_Name).exists() :
						msg="User_Name already exist!Please login or request for new Password!"
						return render_to_response("sign.html",{'flag':msg})
					else:
						obj=Signup(User_Name=User_Name,Password=password,User_Type=typeofuser)
						obj.save()
						msg="Account has been successfully created.Please login!"
						return render_to_response("sign.html",{'flag':msg})
			#except:
			#	msg="User_Name Not Valid!"
	#else:
		#return redirect("/")
#@login_required(login_url="login/")
def sign_up(request):	
	return render_to_response("sign.html",{})
	
	
def edit_lane(request):
	#if request.session.has_key('User_Name'):
		if request.method=="POST":
			User_Name=request.POST["User_Name"]
			password=request.POST["Password"]
			data=Edit_Lane.objects.all()
			tim1=[]	
			for i in data:
				data={}
				data['Lane_Number']=str(i.Lane_Number)
				data["User_Name"]=str(i.User_Name)
				data["Direction"]=str(i.Direction)
				tim1.append(data)
			return render_to_response("edit_lane1.html",{"timesta":tim1,"User_Name":User_Name,"Password":password})
	#else:
		#msg="Your session has been successfully logout!!"
		#return render_to_response("login.html",{})

def edit_lanenumber(request):
	#if request.session.has_key('User_Name'):
		name=request.POST.get("User_Name")
		Lane_Number=request.POST.get("Lane_Number")
		status=request.POST.get("Direction")

		Edit_Lane.objects.filter(User_Name=name).update(Lane_Number=Lane_Number,Direction=status)
		msg="Your values are updated successfully"
		data=Edit_Lane.objects.all()
		tim1=[]
		for i in data:
			data={}
			data['Lane_Number']=str(i.Lane_Number)
			data['User_Name']=str(i.User_Name)
			data['Direction']=str(i.Direction)
			tim1.append(data)
		return render(request,"edit_lane1.html",{'flag':msg,"timesta":tim1})
	#return redirect("/")
def reset_pass(request):
	#if request.session.has_key('User_Name'):
		if request.method=="POST":
			User_Name=request.POST["User_Name"]
			password=REQUEST.post["Password"]

		return render_to_response("reset_password.html",{"User_Name":User_Name,"Password":password})
	#else:
		#msg="Your session has not created!"
		#return render_to_response("login.html",{'flag':msg})

def reset_password(request):
	#if request.session.has_key('User_Name'):
		if request.method=="POST":
			User_Name=request.POST['User_Name']
			existingpass=request.POST['ex_password']
			new=request.POST['new_password']
			if  not Signup.objects.filter(user_name=User_Name).exists():
				msg="User_Name does  not Exist!"
				return render(request,"reset_password.html",{"flag":msg,"User_Name":User_Name,"ex_password":existingpass,"new_password":new})  
			elif not Signup.objects.filter(password=existingpass).exists():
				msg="Password does not match with existing!"
				return render(request,"reset_password.html",{'flag':msg,"User_Name":User_Name,"ex_password":existingpass,"new_password":new})
			else:
				Signup.objects.filter(user_name=User_Name).update(password=new)
				msg="Password Updated Successfully!"
				return  render_to_response("vehicledetails.html",{"flag":msg})
	#else:
		#msg="session will be not created"
		#return render_to_response("login.html",{})


   
   

def monitor(s):
    while True:
        sleep(30)
        
        
        print"==========================1======",Datetime.now()
        m = Monitor.objects.filter(Lane_Number = s)
        for i in m:
            w = i.Webapp
            a = i.Anpr
            p= i.Profiler
            wb = i.Weighbridge 
            b = i.Boombarrier
            t = i.Tolluser 
            c = i.Camera
            u = i.User_Name
            l = i.Location
            st = i.Status
        
            response = os.system("ping -c 1 " +w)
            if response == 0:
                cw = "green"
            else:
                cw = "red"

            response = os.system("ping -c 1 " +a)
            if response == 0:
                ca = "green"
            else:
                ca = "red"
        
            response = os.system("ping -c 1 " +p)
            if response == 0:
                cp = "green"
            else:
                cp = "red"
        
            response = os.system("ping -c 1 " +wb)
            if response == 0:
                cwb = "green"
            else:
                cwb = "red"
        
            response = os.system("ping -c 1 " +b)
            if response == 0:
                cb = "green"
            else:
                cb = "red"
            
            response = os.system("ping -c 1 " +t)
            if response == 0:
                ct = "green"
            else:
                ct = "red"
        
            response = os.system("ping -c 1 " +c)
            if response == 0:
                cc = "green"
            else:
                cc = "red"
            
            
            tt = Datetime.now()
        
            p = Ping(id = s,Lane_Number = s,Webapp = cw,Anpr = ca,Profiler = cp,Weighbridge = cwb,Boombarrier = cb,Tolluser = ct,Camera = cc,User_Name = u,Location = l,Status = st,Timestamp = tt)
            p.save()
            
    
            mon = Ping.objects.all()
            
    return monitor()





#threads = []
#for i in range(1,17):
#    t = threading.Thread(target=monitor, args=(i,))
#    threads.append(t)
#    t.start()

